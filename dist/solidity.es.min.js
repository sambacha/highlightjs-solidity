/*! `solidity` grammar compiled for Highlight.js 11.11.1 */
const hljsGrammar = (() => {
  "use strict"; function e(e) {
    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
  } let a, n, s, t; return e((() => {
    if (t) return s; t = 1
    ;const { baseAssembly: e, solAposStringMode: i, solQuoteStringMode: r, HEX_APOS_STRING_MODE: o, HEX_QUOTE_STRING_MODE: l, SOL_NUMBER: c, isNegativeLookbehindAvailable: d } = (() => {
      if (n) return a; function e() { try { return RegExp("(?<!.)"), !0; } catch (e) { return !1; } }n = 1
      ;let s = /-?(\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\b[1-9](_?\d)*(\.((\d_?)*\d)?)?|\.\d(_?\d)*)([eE][-+]?\d(_?\d)*)?|\b0)(?!\w|\$)/
;e() && (s = s.source.replace(/\\b/g, "(?<!\\$)\\b")); const t = {
        className: "number",
        begin: s,
        relevance: 0
      }; const i = {
        $pattern: /[A-Za-z_$][A-Za-z_$0-9.]*/,
        keyword: "assembly let function if switch case default for leave break continue u256 jump jumpi stop return revert selfdestruct invalid",
        built_in: "add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero and or xor byte shl shr sar addmod mulmod signextend keccak256 pc pop dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 mload mstore mstore8 sload sstore msize tload tstore mcopy gas address balance selfbalance caller callvalue calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash create create2 call callcode delegatecall staticcall log0 log1 log2 log3 log4 chainid origin gasprice basefee blobbasefee blockhash blobhash coinbase timestamp number difficulty prevrandao gaslimit ",
        literal: "true false"
      }; const r = {
        className: "string",
        begin: /\bhex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/
      }; const o = {
        className: "string",
        begin: /\bhex"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?"/
      }; function l(e) {
        return e.inherit(e.APOS_STRING_MODE, { begin: /(\bunicode)?'/ });
      } function c(e) {
        return e.inherit(e.QUOTE_STRING_MODE, { begin: /(\bunicode)?"/ });
      } return a = {
        SOL_ASSEMBLY_KEYWORDS: i,
        baseAssembly: e => {
          const a = l(e); const n = c(e); const s = e.inherit(e.TITLE_MODE, {
            begin: /[A-Za-z$_][0-9A-Za-z$_]*/,
            keywords: i
          }); const d = {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: i,
            contains: [e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, a, n, t]
          }; const u = { className: "operator", begin: /:=|->/ }; return {
            keywords: i,
            contains: [a, n, r, o, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, t, u, {
              className: "function",
              beginKeywords: "function",
              end: "{",
              excludeEnd: !0,
              contains: [s, d, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, u]
            }]
          };
        },
        solAposStringMode: l,
        solQuoteStringMode: c,
        HEX_APOS_STRING_MODE: r,
        HEX_QUOTE_STRING_MODE: o,
        SOL_NUMBER: t,
        isNegativeLookbehindAvailable: e
      };
    })()
;return s = a => {
      for (var n = i(a), s = r(a), t = [], u = 0; u < 32; u++)t[u] = u + 1
      ;const _ = t.map(e => 8 * e); const b = []; for (u = 0; u <= 80; u++)b[u] = u
      ;const g = t.map(e => "bytes" + e).join(" ") + " "; const p = _.map(e => "uint" + e).join(" ") + " "; const E = _.map(e => "int" + e).join(" ") + " "; const m = [].concat.apply([], _.map(e => b.map(a => e + "x" + a))); const M = {
        $pattern: /[A-Za-z_$][A-Za-z_$0-9]*/,
        keyword: "var bool string int uint " + E + p + "byte bytes " + g + "fixed ufixed " + m.map(e => "fixed" + e).join(" ") + " " + m.map(e => "ufixed" + e).join(" ") + " enum struct mapping address unicode new delete if else for while continue break return throw emit try catch revert unchecked _ function modifier event constructor fallback receive error virtual override constant immutable anonymous indexed storage memory calldata external public internal payable pure view private returns import from as using global pragma contract interface library is abstract type assembly",
        literal: "true false wei gwei szabo finney ether seconds minutes hours days weeks years",
        built_in: "self this super selfdestruct suicide now msg block tx abi blockhash gasleft blobhash assert require Error Panic sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod log0 log1 log2 log3 log4"
      }; const O = { className: "operator", begin: /[+\-!~*\/%<>&^|=]/ }; const f = {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: !0,
        excludeEnd: !0,
        keywords: M,
        contains: [a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE, n, s, c, "self"]
      }; const N = {
        begin: /\.\s*/,
        end: /[^A-Za-z0-9$_\.]/,
        excludeBegin: !0,
        excludeEnd: !0,
        keywords: {
          built_in: "gas value selector address length push pop send transfer call callcode delegatecall staticcall balance code codehash wrap unwrap name creationCode runtimeCode interfaceId min max"
        },
        relevance: 2
      }; const C = a.inherit(a.TITLE_MODE, {
        begin: /[A-Za-z$_][0-9A-Za-z$_]*/,
        keywords: M
      }); const y = {
        className: "built_in",
        begin: (d() ? "(?<!\\$)\\b" : "\\b") + "(gas|value|salt)(?=:)"
      }; function w(e, a) {
        return {
          begin: (d() ? "(?<!\\$)\\b" : "\\b") + e + "\\.\\s*",
          end: /[^A-Za-z0-9$_\.]/,
          excludeBegin: !1,
          excludeEnd: !0,
          keywords: {
            $pattern: /[A-Za-z_$][A-Za-z_$0-9]*/,
            built_in: e + " " + a
          },
          contains: [N],
          relevance: 10
        };
      } const h = e(a); const v = a.inherit(h, {
        contains: h.contains.concat([{
          begin: /\./,
          end: /[^A-Za-z0-9$.]/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: { built_in: "slot offset length address selector" },
          relevance: 2
        }, {
          begin: /_/,
          end: /[^A-Za-z0-9$.]/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: { built_in: "slot offset" },
          relevance: 2
        }])
      }); return {
        aliases: ["sol"],
        keywords: M,
        contains: [n, s, o, l, a.C_LINE_COMMENT_MODE, a.COMMENT("/\\*\\*", "\\*/", {
          relevance: 0,
          contains: [{
            className: "doctag",
            begin: "@[A-Za-z]+",
            contains: [{
              className: "type", begin: "\\{", end: "\\}", excludeEnd: !0, excludeBegin: !0, relevance: 0
            }, {
              className: "variable",
              begin: /[A-Za-z_$][A-Za-z_$0-9]*/ + "(?=\\s*(-)|$)",
              endsParent: !0,
              relevance: 0
            }, { begin: /(?=[^\n])\s/, relevance: 0 }]
          }]
        }), a.C_BLOCK_COMMENT_MODE, c, y, O, {
          className: "function",
          beginKeywords: "function modifier event constructor fallback receive error",
          end: /[{;]/,
          excludeEnd: !0,
          contains: [C, f, y, a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE],
          illegal: /%/
        }, w("msg", "gas value data sender sig"), w("block", "blockhash blobhash coinbase difficulty prevrandao gaslimit basefee blobbasefee number timestamp chainid"), w("tx", "gasprice origin"), w("abi", "decode encode encodePacked encodeWithSelector encodeWithSignature encodeCall"), w("bytes", "concat"), w("string", "concat"), N, {
          className: "class",
          beginKeywords: "contract interface library",
          end: "{",
          excludeEnd: !0,
          illegal: /[:"\[\]]/,
          contains: [{ beginKeywords: "is" }, C, f, y, a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE]
        }, {
          beginKeywords: "struct enum",
          end: "{",
          excludeEnd: !0,
          illegal: /[:"\[\]]/,
          contains: [C, a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE]
        }, {
          beginKeywords: "import",
          end: ";",
          keywords: {
            $pattern: /[A-Za-z_$][A-Za-z_$0-9]*/,
            keyword: "import from as"
          },
          contains: [C, n, s, o, l, a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE, O]
        }, {
          beginKeywords: "using",
          end: ";",
          keywords: {
            $pattern: /[A-Za-z_$][A-Za-z_$0-9]*/,
            keyword: "using for global"
          },
          contains: [C, a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE, O]
        }, {
          className: "meta",
          beginKeywords: "pragma",
          end: ";",
          keywords: {
            $pattern: /[A-Za-z_$][A-Za-z_$0-9]*/,
            keyword: "pragma solidity experimental abicoder",
            built_in: "ABIEncoderV2 SMTChecker v1 v2"
          },
          contains: [a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE, a.inherit(n, { className: "meta-string" }), a.inherit(s, { className: "meta-string" })]
        }, {
          beginKeywords: "assembly",
          end: /\b\B/,
          contains: [a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE, a.inherit(n, { className: "meta-string" }), a.inherit(s, { className: "meta-string" }), a.inherit(v, {
            begin: "{", end: "}", endsParent: !0, contains: v.contains.concat([a.inherit(v, { begin: "{", end: "}", contains: v.contains.concat(["self"]) })])
          })]
        }],
        illegal: /#/
      };
    };
  })());
})(); export default hljsGrammar;
